print("This is a code block!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath(/Users/kevinliu/Desktop/QBIO 490/QBIO_490_kevinliu))
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath(/Users/kevinliu/Desktop/QBIO 490/QBIO_490_kevinliu))
knitr::opts_knit$set(root.dir = normalizePath("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data"))
#Fill in correct command
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
itle: "R Notebook"
knitr::opts_knit$set(root.dir = normalizePath("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
```
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
#Fill in correct command
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
write.csv(clinic, "/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv", row.names=FALSE)
clinic <- read.csv("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv")
View(clinic)
knitr::opts_knit$set(root.dir = normalizePath("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
#Fill in correct command
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
write.csv(clinic, "/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv", row.names=FALSE)
clinic <- read.csv("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv")
boxplot(as.integer(clinic$initial_pathologic_dx_year), clinic$ajcc_pathologic_tumor_stage)
boxplot(clinic$initial_pathologic_dx_year, clinic$ajcc_pathologic_tumor_stage)
boxplot(clinic$initial_pathologic_dx_year, clinic$ajcc_pathologic_tumor_stage)
boxplot(clinic$ajcc_pathologic_tumor_stage,clinic$initial_pathologic_dx_year)
boxplot(clinic$ajcc_pathologic_tumor_stage, clinic$initial_pathologic_dx_year)
boxplot(clinic$ajcc_pathologic_tumor_stage, clinic$initial_pathologic_dx_year)
boxplot(clinic$birth_days_to, clinic$initial_pathologic_dx_year)
boxplot(clinic$birth_days_to, clinic$death_days_to)
boxplot(clinic$birth_days_to, clinic$death_days_to)
#install.packages("tidyverse")
#install.packages("tidygraph")
#install.packages("ggraph")
#install.packages("patchwork")
library(tidyverse)
library(tidygraph)
library(ggraph)
library(patchwork)
network <- read.csv("/Users/kevinliu/Downloads/LSUCC0261_ens60_ReactionInfo.csv")
# remove brackets ad quotes
network$in. <- gsub("\\[|\\]", "", network$in.)
network$out <- gsub("\\[|\\]", "", network$out)
network$state <- gsub("\\[|\\]", "", network$state)
network$in. <- gsub("'", "", network$in.)
network$out <- gsub("'", "", network$out)
network_split <- network %>%
mutate(in. = strsplit(as.character(in.), ",")) %>%
unnest(in.)
network_split <- network_split %>%
mutate(out = strsplit(as.character(out), ",")) %>%
unnest(out)
network_split$occurrence <- str_count(network_split$state, "1")/60
# edges
network_origin <- network_split %>% filter(ub == 1000)
network_to <- network_split %>% filter(lb == -1000)
network_origin$from <- network_origin$in.
network_origin$to <- network_origin$out
network_to$from <- network_to$out
network_to$to <- network_to$in.
network_split <- bind_rows(network_origin, network_to)
network_split <- network_split[,c(8,9,7,1)]
node_list <- data.frame(nodes = unique(c(network_split$from, network_split$to)))
network_df <- tbl_graph(nodes = node_list, edges= network_split, directed = TRUE)
ggraph(network_df, layout = "linear") +
geom_edge_fan(aes(alpha = occurrence),
arrow = arrow(length = unit(1, 'mm')),
start_cap = circle(1, 'mm'),
end_cap = circle(1, 'mm')) +
geom_node_point() + theme_classic() +
theme(text = element_text(size = 15),
axis.text = element_blank(),
axis.line = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
ggraph(network_df) +
geom_edge_fan(aes(alpha = occurrence),
arrow = arrow(length = unit(1, 'mm')),
start_cap = circle(1, 'mm'),
end_cap = circle(1, 'mm')) +
geom_node_point() + theme_classic() +
theme(text = element_text(size = 15),
axis.text = element_blank(),
axis.line = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
network_df <- network_df %>%
activate(nodes) %>%
mutate(degree = centrality_degree(),
betweenness = centrality_betweenness(),
eigen = centrality_eigen(directed = TRUE))
out_nodes <- network_df %>%
activate(nodes) %>% data.frame()
out_edges <- network_df %>%
activate(edges) %>%
mutate(betweenness = centrality_edge_betweenness()) %>% data.frame()
ggplot(out_nodes, aes(x = eigen)) +
geom_histogram() + theme_classic() +
labs(x = "Centrality (Eigen)", y = "Count") +
theme(text = element_text(size = 15))
ggplot(out_edges, aes(x = occurrence)) +
geom_histogram() + theme_classic() + labs(x = "Occurrence", y = "Count") +
theme(text = element_text(size = 15)) +
ggplot(out_edges, aes(x = occurrence, y = betweenness)) + geom_point() +
scale_y_log10() + theme_classic() +
theme(text = element_text(size = 15))
knitr::opts_knit$set(root.dir = normalizePath("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
#Fill in correct command
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
write.csv(clinic, "/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv", row.names=FALSE)
clinic <- read.csv("/Users/kevinliu/desktop/qbio_490/QBIO_490_kevinliu/analysis_data/brca_clinical_data.csv")
boxplot(clinic$age_at_diagnosis, clinic$death_days_to)
boxplot(clinic$birth_days_to ~ clinic$death_days_to))
boxplot(clinic$birth_days_to ~ clinic$death_days_to)
boxplot(clinic$birth_days_to ~ clinic$gender)
boxplot(clinic$age_at_diagnosis ~ clinic$gender)
plot(clinic$birth_days_to, clinic$death_days_to)
boxplot(clinic$age_at_diagnosis ~ clinic$gender)
boxplot(clinic$age_at_diagnosis ~ clinic$gender)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis",
boxplot(clinic$age_at_diagnosis ~ clinic$gender)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
boxplot(clinic$age_at_diagnosis, clinic$gender)
boxplot(clinic$age_at_diagnosis ~ clinic$gender)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis",
plot(clinic$birth_days_to, clinic$death_days_to)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "")
plot(clinic$birth_days_to, clinic$death_days_to)
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "")
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "")
title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "")
title(main = "Graph ", xlab = "gender", ylab = "age at diagnosis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "")
title(main = "Age at diagnosis versus gender ", xlab = "gender", ylab = "age at diagnosis")
boxplot(clinic$age_at_diagnosis ~ clinic$gender, xlab = "", ylab = "", col.axis = "skyblue")
title(main = "Age at diagnosis versus gender ", xlab = "gender", ylab = "age at diagnosis")
plot(clinic$birth_days_to, clinic$death_days_to, xlab = "", ylab = "", col.axis = "skyblue")
title(main = "Graph ", sub = "Geeksforgeeks article",
xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to, xlab = "", ylab = "", col.axis = "orange")
title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to, xlab = "", ylab = "", col.axis = "orange")
#title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to, main = "birth days toxlab = "1", ylab = "2", col.axis = "orange")
plot(clinic$birth_days_to, clinic$death_days_to, main = "birth days to", xlab = "1", ylab = "2", col.axis = "orange")
#title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
plot(clinic$birth_days_to, clinic$death_days_to, main = "birth days to diagnosis versus death days to diagnosis", xlab = "1", ylab = "2", col.axis = "orange")
#title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
plot(clinic$last_contact_days_to, clinic$death_days_to, main = "days from last contact versus days to death from diagnosis", xlab = "1", ylab = "2", col.axis = "orange")
#title(main = "Graph ", xlab = "X axis", ylab = "Y axis")
plot(clinic$last_contact_days_to, clinic$death_days_to, main = "days from last contact versus days to death from diagnosis", xlab = "days from last contact", ylab = "days to death from diagnosis", col.axis = "orange")
plot(clinic$last_contact_days_to, clinic$death_days_to, main = "days from last contact versus days to death from diagnosis", xlab = "days from last contact", ylab = "days to death from diagnosis", col.axis = "orange")
plot(clinic$last_contact_days_to, clinic$death_days_to, main = "days from last contact versus days to death from diagnosis", xlab = "days from last contact", ylab = "days to death from diagnosis", col.axis = "orange")
plot(clinic$lymph_nodes_examined_count, clinic$death_days_to, main = "days from last contact versus days to death from diagnosis", xlab = "days from last contact", ylab = "days to death from diagnosis", col.axis = "orange")
plot(clinic$lymph_nodes_examined_count, clinic$death_days_to, main = "lymph nodes examined count versus days to death from diagnosis", xlab = "lymph nodes examined countt", ylab = "days to death from diagnosis", col.axis = "orange")
library(survival)
library(survminer)
library(ggplot2)
vital_status_na_mask <- ifelse(is.na(clinic$vital_status), FALSE, TRUE)
vital_status_na_mask <- ifelse(!is.na(clinic$vital_status), TRUE, FALSE)
male_mask <- ifelse(clinic$gender == "MALE", TRUE, FALSE)
under30_over60_mask <- ifelse(clinic$age_at_diagnosis > 60 | clinic$age_at_diagnosis < 35, TRUE, FALSE)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, clinic)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, clinic, "")
View(no_middle_clinic)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, clinic[], "")
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, clinic[1], "")
View(no_middle_clinic)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, no_middle_clinic <- clinic, "")
View(no_middle_clinic)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, no_middle_clinic <- clinic, "")
View(no_middle_clinic)
no_middle_clinic <- ifelse(under30_over60_mask == TRUE, clinic, "skip")
no_middle_clinic <- clinic
View(no_middle_clinic)
no_middle_clinic <- clinic[under30_over60_mask, ]
View(no_middle_clinic)
View(out_nodes)
if (!require(survival)) {
install.packages("survival")
}
if (!require(survminer)) {
install.packages("survminer")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
library(survival)
library(survminer)
library(ggplot2)
age_NA_mask <-  ifelse(!is.na(clinic$age_at_diagnosis), T, F)
cleaned_clinic <- clinic[age_NA_mask, ]
View(cleaned_clinic)
cleaned_clinic$age_category <- ifelse(cleaned_clinic$age_at_diagnosis <= 35, "Young", ifelse(cleaned_clinic$age_at_diagnosis > 35 & cleaned_clinic$age_at_diagnosis < 50, "Middle", Old))
cleaned_clinic$age_category <- ifelse(cleaned_clinic$age_at_diagnosis <= 35, "Young", ifelse(cleaned_clinic$age_at_diagnosis > 35 & cleaned_clinic$age_at_diagnosis < 50, "Middle", "Old"))
View(cleaned_clinic)
View(cleaned_clinic)
cleaned_clinic$survival_time <- ifelse(!is.na(cleaned_clinic$last_contact_days_to), cleaned_clinic$last_contact_days_to[], cleaned_clinic$death_days_to[])
cleaned_clinic$survival_time```
print (cleaned_clinic$survival_time)```
print (cleaned_clinic$survival_time)
survival_mask <- ifelse(!is.na(cleaned_clinic$last_contact_days_to),True, )
cleaned_clinic$survival_time <- ifelse(cleaned_clinic$last_contact_days_to != "[Not Applicable]", cleaned_clinic$last_contact_days_to[], cleaned_clinic$death_days_to[])
print (cleaned_clinic$survival_time)
cleaned_clinic$survival_time <- ifelse(cleaned_clinic$last_contact_days_to != "[Not Applicable]", cleaned_clinic$last_contact_days_to[], cleaned_clinic$death_days_to[])
print (cleaned_clinic$survival_time)
cleaned_clinic$survival_time <- ifelse(cleaned_clinic$last_contact_days_to != "[Not Available]", cleaned_clinic$last_contact_days_to[], cleaned_clinic$death_days_to[])
print (cleaned_clinic$survival_time)
cleaned_clinic$survival_time <- as.numeric(cleaned_clinic$survival_time)
cleaned_clinic$death_event <- ifelse(cleaned_clinic$vital_status == "Alive", "F", "T")
survival_object <- Surv(time = cleaned_clinic$survival_time,
event = cleaned_clinic$death_event)
cleaned_clinic$death_event <- ifelse(cleaned_clinic$vital_status == "Alive", F, T)
survival_object <- Surv(time = cleaned_clinic$survival_time,
event = cleaned_clinic$death_event)
fit_object <- survfit(survival_object ~ age_category, data = cleaned_clinic)
survplot <- ggsurvplot(fit_object,
pval=TRUE,
ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
legend = 'right')
KM_plot <- survplot$plot + theme_bw() + theme(axis.title = element_text(size=20),
axis.text = element_text(size=16),
legend.title = element_text(size=14),
legend.text = element_text(size=12))
KM_plot
head (cleaned_clinic$survival_time )
less (cleaned_clinic$survival_time )
view (cleaned_clinic$survival_time )
print (cleaned_clinic$survival_time )
max.print (cleaned_clinic$survival_time )
max.print(cleaned_clinic$survival_time )
print(cleaned_clinic$survival_time )
